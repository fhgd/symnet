==== symnet

Symnet is a python program used for symbolic network analysis. It's main
purpose is the extraction of the circuit equations from a electrical network
given as a netlist. Symnet depends on

    * sympycore (for dealing with the symbolic expressions)
    * pyparsing (for parsing the netlist)

Up to now only a few basic network elements are implemented:

    * Constant voltage and current sources: V, I
    * Resistor: R
    * Controlled Sources: E, F, G, H
            
            u = E(u)    i = F(i)    i = G(u)    u = H(i)

    * ToDo: Nullator, Norator (= Nullor)
    
Once the network topology of the electric circuit is defined, a tree of this
network must be choosen. A tree is a subgraph of the network which connects
all nodes with some selected branches without making a loop. Afterwards a
normal node- or loop analysis is used to build up the circuit equations.

Here is an example with the simple voltage divider:

    >>> g, ctrl_src = parse_netlist("""
    Vin 1 0
    R1  1 2
    R2  2 0
    """)
    >>> tree = g.tree(['Vin', 'R2'])
    >>> eqs, vars = cut_analysis(g, ctrl_src, tree)
    
    >>> print vars
    [Calculus('V_R2')]
    
    >>> print eqs
    [Calculus('G_R1*V_R2 + G_R2*V_R2 - G_R1*Vin')]
    
Then sympycore can be used to solve this equation:

           G_R1*Vin         Vin
    V_R2 = ----------- = ---------
           G_R1 + G_R2   1 + R1/R2

Symnet is in a very early development stage. Any help and especially some
application circuits are welcome:

    Friedrich Hagedorn <friedrich_h@gmx.de>

The following (long) text collects all my ideas about the theory 
and implementation of symnet (in german).

==== Diskussion mit Daniel Schillinger:

* symnet (zunaechst) nur zum Aufstellen des (nichtlin.) GlSys. verwenden

(2.) Einlesen aus Netzliste
    Netzliste von: LTSpice, Qucs, SpicyVoltSim, CircuitLabs
    Frage: Wie mit gesteuerten Quellen umgehen?
        Steuergröße kann nicht nur ein anderer Zweig, sondern allgemein auch
        ein Leerlauf oder Kurzschluss sein
        (beim Einlesen einer (Spice-) Netzliste automatisch einfuegen)

(3.) Transistor als 3-Pol unterstuetzen und als einfaches Model ersetzen

(1.) Standardbaum der KSA
    automatisch Leerläufe einfügen, um die gewoehnlichen Knotenspannungen
    zu erhalten

* Gleichungen von Mathematica lösen lassen (Copy-Paste)

* Eigene grafische Eingabe
    ipython Notebook? 
    Darstellung des Netzwerkes zunaechst mit 
        - graphviz: pygraphviz, pydot
        - networkx (Node positioning algorithms) und matplotlib


==== ToDo before release:

* Standardbaum der KSA (automatisch Leerläufe einfügen)

* Beispiele

* Trivialgleichungen wenn möglich reduzieren

* Versuch: Zweigvariablen der Quellen erst später ersetzten
    Gesteuerten Quellen zuerst wie unabhängige Quellen behandeln, dann
    erst ersetzten...

    Damit rekursive Struktur von branch_{current,voltage} und f_{i,u} entfernen

* CleanUp


==== Verschiedene Ideen

* Folgende Abbkürzungen könnten die Lesbarkeit erhöhen:
    brn     branch
    brns    branches
    tbrn    tree branch
    tbrns   tree branches
    cbrns   cobranches

    ctrls   controlled sources

    succ    braches_in
    pred    braches_out
    brns    inc (incidence)

Idee zu den Zweigen:
    Statt Strings könnten die Zweige auch eigene Objekte sein (Unterklasse
    von String?), welche die benöigten Informationen bequemer bereitstellen.

        b.name
        b.type                  # auch durch Klasse erkennbar?!
        b.i
        b.u
        b.f_i
        b.f_u
        b.controlled_branch     # für gesteuerte Quellen

    Klasse muss aber *immutable* sein!

    Nicht so gut, da somit der Typ eines Zweiges nich einfach geändert
    werden kann. Besser sind dicts:

        type = types[branch]
        ctrl = ctrls[branch]

Diese beiden dicts zusammen mit dem Graphen als Netzwerk Klasse?!

Gesteuerte Quellen:

    Alternative zur extra Klasse: steuernder Zweig mit im Namen angeben,
    zBsp.: 'G2(R3)'

u = E(u)
i = F(i)
i = G(u)
u = H(i)

    Schnittanalyse:
        I(u) keine Extrabehandlung
        I(i) Beim Einsetzen der Zweigrelationen den Steuerstrom i = f_i(u)
             mit ersetzten
        U(u) Gleichung U_branch - U(u) = 0 aufstellen und U_branch, u durch
             Baumspannungen ersetzen.
        U(i) Gleichung U_branch - U(i) = 0 aufstellen, den Steuerstrom i = f_i(u)
             ersetzen und dann U_branch und u durch Baumspannungen ersetzen.

    Maschenanalyse:
        U(i) keine Extrabehandlung
        U(u) Beim Einsetzen der Zweigrelationen die Steuerspannung u = f_u(i)
             mit ersetzten
        I(i) Gleichung I_branch - I(u) = 0 aufstellen und I_branch, i durch
             Cobaumströme ersetzen.
        I(u) Schnittgleichung I_branch - I(u) = 0 aufstellen, die Steuerspannung
             u = f_u(i) ersetzen und dann I_branch und i durch Cobaumströme
             ersetzen.

Nullator:

    Schnittanalyse:
        Wenn Nullator im Baum, dann keine Schnittgleichung aufstellen (v = 0)
                     ... Cobaum, dann liefert f_i = 0.

        Maschengleichung:
            Wenn Nullator im Cobaum, dann liefert f_u = 0 und I_cobranch NICHT
            an vars anhaengen, da wegen f_i = 0 nicht benoetigt!

            Wenn Nullator im Baum, dann liefert branch_voltage = 0.

Norator:

    Es sollte keine Extrabehandlung notwenig sein, da von f_u,i und
    branch_voltage,current bereits abgedeckt: 'I_'+brn und 'V_'+brn

    An geeigneter Stelle noch: vars.append(v_norator, i_norator)


==== Ideen zu den Gleichungen der Zweigrelationen

* Trennung der Zweigspannungen und -ströme nach explizit und implizit:

  Implizite UI-Relation des Zweiges k (insgesamt z Zweige):

    F_k(U, I) = 0

  mit allen alle Zweigspannungen und -strömen

    U = U1..Uk..Uz    I = I1..Ik..Iz

  Expliziete Darstellung

    Ik = fI_k(U, I1, ..., Ik-1, Ik+1, ..., Iz)

  bzw.

    Uk = fU_k(U1, ..., Uk-1, Uk+1, ..., Uz, I)

  Zum Beispiel sind Ströme durch Spannungsquellen und Spannungen von
  Stromquellen implizit.

  Übertragung auf Baum- und Nichtbaumgrößen. Bei welcher Analyse können
  durch die gesteuerten Quellen implizite Beziehungen auftreten?
  Vermutung:

    Bei KSA werden die CoSpannungen durch die Baumspannungen ersetzt

        u_co = u1 + u2 + ...

    Wenn jetzt u_co eine steuernde Spannung ist, kann eine Schleife entstehen:

        u_co = E*u_co + u2

        Dann u_co extra Variable und extra Schnittgleichung
        (gest. U-Quelle liegt ja im Baum, siehe obere Maschengleichung)

    Oder

        Gest. U-Quelle liegt im Cobaum und deren Spannung wird benötigt:
        u_co1 = E1*u_co2
        u_co2 = E2*u_co1 + u1 + u2

        Problem E2 wie oben.

    Oder

        Gest. U-Quelle liegt im Cobaum und deren Spannung wird benötigt:
        u_co=E*u2 [= u1 + u2] # fertig, da Baumspannung

    nicht. Oder

        0 =    i1 +    i2 + G*u_co
          = G1*u1 + G2*u2 + G*(u1 + u2)

    nicht. Oder

        0 =    i1 +    i2 + F*i1
          = G1*u1 + G2*u2 + F*(G1*u1)

        Wenn i1 nicht durch u ausgedrückt werden kann (implizit?), dann
        wird i1 sowieso extra mitgeführt, weil i1 ja ebenfalls in den
        Schnittgleichungen benötigt wird.

    auch nicht.

    ... u = H(i) fehlt noch...

* Eventuell doch networkx:

Von Zweigdarstellung:

  --- a ->-+--- R ->-+--- 1 ->-+
  --- b ->-+         +--- 2 ->-+
           |                   |
           +-------- c --->----+

Nach Knotendarstellung:

              <--------+
  a --->       ------> |
  b --> R --> 1 <-+--> c
        |     |   |    |
        |     V   |    |
        +---> 2 --+    |
               <-------+


==== Old Docs

Literatur:

* Symbolic Circuit Analysis:  http://rodanski.net/ben/work/symbolic/index.htm

Gedanken zur internen Struktur:


* Knoten:

    # Topologie
    Get-Funktion: Menge der angeschlossenen Zweige

    nodes = {'node_name' : (set(startBranches), set(endBranches))}
    node_branches = set.union(*nodes[node])     # g.node.branches
    node_branches_start = nodes[node][0]        # g.node.branches_start
    node_branches_end   = nodes[node][1]        # g.node.branches_end

    def inverse(mydict):
        return dict((v, k) for k, vals in mydict.items() for v in vals)
        # Fehler, wenn ein Knoten nur einen Zweig enthält!
        # Bei leeren Mengen kein Fehler?!

* Zweig:

    # Topologie
    Var: (Von-Knoten, Nach-Knoten)

    branches = {'branch_name' : (from_node, to_node)}
    branch_nodes = branches[branch]             # g.branch.nodes
    branch_from_node = branches[branch][0]      # g.branch.node_from
    branch_to_node = branches[branch][1]        # g.branch.node_to

    # Netzwerkgrössen
    Var-Symbol: Zweigspannung, Zweigstrom

    # Zweigrelation
    Funktion: Bauteilinstanz (U=f(i), I=f(u), R, L, C, Norator, Fixator)

ToDo: Unterschied zwischen Zweig und Bauteil?!

    Keiner, da ein Zweig = Von-Nach-Knoten + Zweigrelation
    und ein Bauteil ja auch nur als Relation zw. I/U dargestellt wird.

    Schon alleine die benötigte Existenz von Zweig-I/U impliziert die
    Existenz zweier Knoten: Eine Spannung existiert nur zw zwei Knoten,
    Ein Strom kann nur in einem Pfad fließen, der wiederum zw zwei
    (oder mehreren) Knoten liegt.

    Bauteile mit mehr als zwei Knoten, sollten als Teilnetzwerke
    behandelt werden.

Zweigrelation:

    Als f() implementieren und dann zB:

      fU = f
      fI = solve(self.U==f, self.I)

    Ganz allgemein: f(alle Netzwerkgrößen, Parameter)

    Verallgemeinerung: mehrere Parameter, mehrere Steuergrößen verwalten

    Mehrere Definitionsgleichungen (insbesondere fU, fI) zu verwalten scheint
    nicht notwendig, da diese als hybrides System modelliert werden können.

* Schnitt:

    Menge aus innern Knoten

        cut = set(some nodes)

    Menge aus orientierten Zweigen, deren Knoten sowohl
    innerhalb als auch auserhalb des Schnittes liegen

    Von Knotenmenge auf Zweigmenge:
        aus der Menge aller Zweige, welche zur Knotenmenge gehören,
        diejenigen auswählen, welche einen Knoten beitzen, der
        nicht zur Knotenmenge gehört

        cut_branches = set()
        for node in cut:
            for branch in nodes[node]:
                for branch_node in branches[branch]:
                    if branch_node not in cut:
                        cut_branches.add(branch)

        ToDo: Schnittzweige orientieren!


    Achtung: complement(cut, nodes) ist bis auf das Vorzeiches der
             gleiche Schnitt!

    Die Definition über die Zweige scheint zweckmäßiger zu sein. (Wegen der
    Baummethoden und der benötigen Zweigströme eines Schnittes)
    Dann muss aber auch die Richtung des Schnittes über einen ausgewählten
    Zweig definiert sein!

    ToDo: Von der Zweigmenge auf die Knotenmenge!
    zBsp. über Baum, welcher nur einen Zweig der Schnitt-Zweig-Menge enthält.
    Oder diese Zweigmenge aus dem Netzwerk entfernen und (irgendwie) prüfen,
    ob es noch zusammenhängend ist (zBsp. irgendeinen Baum suchen).

    Allerdings ist die Aufteilung der Knotenmenge in zwei Teile bei Entfernung
    eines Baumzweiges sehr einfach und eindeutig. Folglich wäre eine Teilmenge
    der Knotenmenge eine (bis auf Vorzeichen) eindeutige Eingabe und als Ausgabe
    könnten die Schnittzweige recht einfach berechnet werden. Wenn man einen
    Baum zu dieser Schnitt-Knotenmenge kennt, geht es sogar noch schneller,
    weil nur die Nichtbaumzweige untersucht werden müssten.

* Masche:

    Liste von Knoten und Zweigen, die einen *geschlossenen Weg* von
    Knoten zu Knoten über Zweige angeben

        loop = list(connecting branches)
        is_loop(loop) == True if loop is closed

        def make_loop(branches):
            "Order the loop branches according to the first branch"
            Return
                [(branch1, 0), (branch2, 1), ...]
            Oder alternativ:
                   [branch1, branch2, ...], {branch1 : 1, branch2 : -1}
            Evt.: Knoten-Zweig-Relation selbst aus der branches Menge erstellen

            loop = [(branches[0], 0)}
            for branch in branches[1:]:
                last_dir = loop[-1][1]
                last_node = branches[loop[-1][0]][last_dir]
                next_branch = [br for br in nodes[last_node] if br in branches]
                if len(next_branch) == 1:
                    next_branch = next_branch[0]
                    next_branch_nodes = branches[next_branch]
                    if last_node == next_branch_nodes[0]
                        loop.append((next_branch, 0))
                    else:
                        loop.append((next_branch, 1))
                    # (0, 1) |=> (1, -1) = -2x + 1
                else:
                    # No successor branch for to_node found in the branches set
                    return []
            last_dir = loop[-1][1]
            if branches[loop[-1][0]][last_dir] == branches[loop[0][0]][0]
                return loop
            else:
                # Connecting branches are not closed
                return []

    Zweig = Von-Knoten - Nach-Knoten
    Knoten - Zweig = Zweig so orientieren, dass er an Knoten anschließt
    Knoten1 - Knoten2 = Knotenspannung


* Baum:

    Ist eine Menge *nicht geschlossener Wege* im Netzwerk, die jedoch
    mit *einem* Zweig (vielleicht auch Weg) aus dem Nichtbaum
    geschlossen werden.
    (Alternativ: Eine Teilmenge von Zweigen, welche alle Knoten verbindet und
    dabei aber keine Masche bildet heisst Baum.)

    <=> Ein Baum hat k-1 Zweige, welche alle Knoten verbinden.

        tree = set(branches)
        def is_tree(tree):
            if len(tree) == len(nodes) - 1:
                tree_nodes = set(branches[branch] for branch in tree)
                if flatten(tree_nodes) == nodes:
                    return True
                else:
                    return False
            else:
                return False

    Da ein Weg nicht notwendiger Weise ein Zweig sein muss, ist auch
    kein extra virtueller Baum nötig. Jedoch kann der Baum auf die
    Eigenschaft

        .is_virtual = True|False

    geprüft werden.


* Bezeichnung der Knotenspannungen (= Baumspannungen):

    Da der Baum der Knotenspannungen auch virtuell sein kann (KSA), lassen
    sich nicht in eindeutiger Weise die Zweigbezeichnung verwendet.

    Allerdings existiert zu jedem (viruellen) Baumzweig in eindeutiger
    Weise ein (Fundametal)-Schnitt, welcher durch die inneren Knoten
    eindeutig bestimmt ist. Somit könnten die Knotenspannungen nach den
    inneren Knoten des jeweiligen Schnittes bezeichnet werden. (Vielleicht
    zur internen Bezeichnung sinnvoll, da eindeutig.)
        Diese Bezeichnung ist möglich, aber sicherlich aufwendiger.

    Oder man verwendet die Von-Nach-Knoten der (virtuellen) Baumzweige als
    (klassische) Bezeichnung für die Knotenspannungen.
        Scheint die bessere Wahl zu sein, weil einfacher und eigentlich
        auch eindeutig.

* Cobaum (Nichtbaum):

    Ist die Komplementärmenge zum Baum bzgl. des gesamten Netzwerkes.

    Frage: Besteht der Nichtbaum nur aus 'echten' Wegen, nämlich Zweigen,
    oder können auch 'Luftwege' wie Knotenspannungen erlaubt sein?

        cotree = complement(branches, tree)

* Knotenspannungsanalyse (KSA):

    Es scheint wohl (theoretisch) einfacher zu werden, wenn die fehlenden
    Zweige im Netzwerk durch Leerläufe (Stromquellen mit I=0) ergänzt werden.
    Dann ist nämlich ein Weg immer auch ein Zweig. Die Leerlaufzweige werden
    dann mit Von-Nach-Knoten bezeichnet.

    Als Bezugsknoten entweder einen beliebigen Netzwerksknoten wählen
    (zufällig oder Benutzereingabe), oder den mit den meisten
    Anschlusszweigen (zu unterschiedlichen Knoten). Dadurch wird die Anzahl
    der zusätzlichen Leerläufe minimiert.

* Fundamentalmasche (eines Nichtbaumzweiges):

    Jedem Nichtbaumzweig ist genau eine Masche zugeordnet. Diese besteht aus
    dem Nichtbaumzweig und geeigneten Baumzweigen. Diese Baumzweige lassen
    sich wie folgt finden:

    1. Von der Knotenmenge die zwei Knoten des Nichtbaumzweiges entfernen
    2. Alle Knoten entfernen, welche nur einen Baumzweig besitzen
    3. Die übrigen Knoten besitzen noch genau zwei (Baum)-Zweige, welche die
       Fundamentalmasche des Nichtbaumzweiges bilden.

    lbranches = copy(tree)
    for node in (nodes - branches[cobranch]):
        # Wenn Schnittmenge der Knotenzweige mit Baumzweigen == 1,
        # dann ist dies ein freier Baumzweig und wird entfernt.
        trbranches = [branch for branch in nodes[node] if branch in lbranches]
        if len(trbranches) == 1:
            lbranches.remove(trbranches)
    fdloops = {cobranch1 : lbranches1, cobranch2 : lbranches2, ...}

    loop = make_loop([cobranch] + lbranches)

    Fundamentalmasche suchen würde schneller gehen, wenn der Baum ein eigenes
    Netzwerk bzw. Graph wäre.

Alternativ: Menge der Fundamentalmaschen-Baumzweige aus den Fundamentalschnitten
    bestimmen.

    # Fundamentalmasche für 'cobranch'
    loop = [trb for trb, cutbrunches in fdcuts.items() if cobranch in cutbrunches]

    ToDo: Orientierung der Baumzweige bzgl. cobranch sollte möglich sein.

* Fundamentalschnitt (eines Baumzweiges):

    Bei Entfernung eines Baumzweiges und entsprechender Nichtbaumzweige
    zerfällt das Netzwerk in zwei seperate Teile, so dass diese Zweige einen
    Fundamentalschnitt bilden.

    1. Alle Fundamentalmaschen aufsuchen, welche diesen Baumzweig enthalten.
    2. Die Nichtbaumzweige dieser Fundamentalmaschen gehören zum
       Fundamentalschnitt.

    # Fundamentalschnitt für 'trbranch'
    cutbranches = [cb for cb, lbrnches in fdloops.items() if trbrnch in lbrnches]
    fdcuts = {trbanch1 : cutbrunches1, ...}

    Allgemeiner (ohne Baum), aber aufwändiger, siehe oben bei 'Schnitt'.

* Minimale Anzahl unabhaengiger Netzwerkgroessen:

    k-1 unabh. Baumspannungen (wenige Knoten, viele Zweige)
    z - (k-1) unabh. Nichtbaumstroeme (mehr Baum- als Verbindungszweige)

    len(nodes) - 1
    len(branches) - (len(nodes) - 1)

* Algebra:
    Aus der Zweigmenge einer Masche oder Schnittes resultiert:

        i1 + i2 + ... ik = 0    bzw.    u1 + u2 + ... uk = 0

    Es sollte auch ohne CAS möglich sein, eine einzelne Zweig-U/I
    zu berechnen:

        i1 = -i2 + ... - ik     bzw.    u1 = -u2 + ... - uk

    Dies ist notwendig, damit die Ströme und Spannungen der Maschen
    und Schnitte ersetzt werden können.

    Damit sollten sich auch die Admitanzmatrizen aufstellen lassen.
    (Evt. alle Funtamentalgleichungen durchnummerieren und als Matrizen
    aufstellen? 0 = I G U0   mit I=Schnitte, G=Leitwerte, U0=Maschen)

    Damit sollten auch bei lineare NW die Knoten- bzw. Maschengleichung
    nach den Quellen auflösbar sein:

        IQ = i1 + i2 + ... ik   bzw. UQ = u1 + u2 + ... + uk

    Folglich könnte die etwas aufwändige Trennung der Variablen für das
    lineare Gleichungssystem (Matrix) entfallen.

    => Folgende Gleichungen zum 'ausrechnen' erzeugen:

        fI1(u1) + fI2(u1-u3) + fI3(u3) = Iq
        ...

    Matrix (für u1, u3) mit CAS erzeugen.

    Vielleicht wäre es aber besser, die Ersetzungen (u2 = u1-u3) auch dem
    CAS zu überlassen?!

ToDo:
        modifizierte KSA
        Maschenströme sinnvoll definieren
        (Strom der Fundamentalmasche in Richtung des Nichtbaumzweiges?)

        Mehrpole


Nutzerinterface:

   +---- R1+ -----+---+
   |              |   Y
   +---- Uq -->---+  +|
         +-           IQ
                     -|
                      A         (Verbraucherzählpfeilsystem)
                      |         (oder Standardorientierung von li-re, ob-un)
                      +----

* Eingabe:

    # leeres Netzwerk
    nw = network()

    # nur Knoten, keine Zweige
    nw = network(Knotenmenge)

    # Netzliste = Zweigmenge
    # Knotenmenge aus den Von-Nach-Knoten der einzelnen Zweige bestimmen
    nw = network(Zweigmenge)

    # Netzliste aus Datei
    nw = network('circuit.cir')
    nw.parse_netlist('circuit.cir')


* Modifikationen:

    # Sehr schön wäre ja bestimmt: (Frage Zweig-Bauteil)
    nw += zweig
    nw -= zweig
    nw += knoten
    nw -= knoten

    # Hinzufügen
    nw.add(knoten)
    nw.add(zweig) # automatisch Knoten hinzufügen

    nw.nodes.add(knoten)
    nw.branches.add(zweig)

    # Löschen
    nw.remove(knoten)
    nw.remove(zweig)

    nw.branches.remove(zweig)
    nw.nodes.remove(node) # Methode überschreiben: auch Zweige entfernen

    del nw.zweig
    del nw.knoten # löscht auch alle dazugehörigen Zweige


* Ausgabe:

    # alle Knoten als set (Knotenmenge)
    nw.nodes

    # alle Zweige als set (Zweigmenge)
    nw.branches

    # unabhängige Knotengleichungen
    len(nw.nodes) - 1

    # unabhängige Maschengleichungen
    len(nw.branches) - len(nw.nodes) + 1

    # Wenn das netzwerk aus mehreren nichtzusammenhängenden
    # Teilnetzwerken besteht: 1 <=> Anzahl der Teilnetzwerke

    # Quellen mit f(0) != 0 ausgeben
    nw.i.sources
    nw.u.sources
    nw.sources

    # Lösung für eine Netzwerkgrösse = func(Quellen)
    nw.i.zweig
    nw.u.zweig

    nw.u.knoten == u_knoten + konst
    nw.u.knoten1.knoten2 == u_knoten1 - u_knoten2
    nw.relnode = bezugsknoten
    nw.u.knoten == u_knoten - u_relnode

    # oder auch
    nw.u(zweig)
    nw.u(knoten)
    nw.u(Von-Knoten, Nach-Knoten)

    # Analyse für Zweiggrössen (nw.u, nw.i) festlegen
    nw.analyse = nodal
    nw.analyse() == Liste der knotenspannungen


